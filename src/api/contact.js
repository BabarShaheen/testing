// ESM serverless function for Vercel
// Sends a structured email to site admins and a confirmation copy to the client
/* eslint-env node */
import 'dotenv/config';
import { Resend } from 'resend';

// Production-configurable emails
const ADMIN_EMAIL = (process.env.ADMIN_EMAIL || '').trim() || null;
// Use Resend's default sender domain so you DON'T need any domain/DNS setup
const FROM_EMAIL =
  process.env.FROM_EMAIL || 'Citrix Consulting <onboarding@resend.dev>';

function buildAdminHtml(payload) {
  const { name, email, company, phone, service, message } = payload;
  const safe = (v) =>
    typeof v === 'string' ? v.replace(/</g, '&lt;').replace(/>/g, '&gt;') : '';
  return `
  <div style="font-family:ui-sans-serif,system-ui,-apple-system,Segoe UI,Roboto,Ubuntu, Cantarell, Noto Sans, Helvetica Neue, Arial; color:#0f172a;">
    <h2 style="margin:0 0 12px;">New Contact Form Submission</h2>
    <p style="margin:0 0 16px; color:#334155;">You have received a new enquiry from the website.</p>
    <table style="width:100%; border-collapse:collapse;">
      <tbody>
        <tr>
          <td style="padding:8px 12px; background:#f8fafc; width:180px;">Name</td>
          <td style="padding:8px 12px;">${safe(name)}</td>
        </tr>
        <tr>
          <td style="padding:8px 12px; background:#f8fafc;">Email</td>
          <td style="padding:8px 12px;">${safe(email)}</td>
        </tr>
        <tr>
          <td style="padding:8px 12px; background:#f8fafc;">Company</td>
          <td style="padding:8px 12px;">${safe(company)}</td>
        </tr>
        <tr>
          <td style="padding:8px 12px; background:#f8fafc;">Phone</td>
          <td style="padding:8px 12px;">${safe(phone)}</td>
        </tr>
        <tr>
          <td style="padding:8px 12px; background:#f8fafc;">Service of Interest</td>
          <td style="padding:8px 12px;">${safe(service)}</td>
        </tr>
        <tr>
          <td style="padding:8px 12px; background:#f8fafc; vertical-align:top;">Message</td>
          <td style="padding:8px 12px; white-space:pre-wrap;">${safe(
            message
          )}</td>
        </tr>
      </tbody>
    </table>
    <p style="margin-top:16px; color:#334155;">This email was generated by the website contact form.</p>
  </div>`;
}

function buildClientHtml(payload) {
  const { name, message } = payload;
  const safe = (v) =>
    typeof v === 'string' ? v.replace(/</g, '&lt;').replace(/>/g, '&gt;') : '';
  return `
  <div style="font-family:ui-sans-serif,system-ui,-apple-system,Segoe UI,Roboto,Ubuntu, Cantarell, Noto Sans, Helvetica Neue, Arial; color:#0f172a;">
    <h2 style="margin:0 0 12px;">Thanks, we received your message</h2>
    <p style="margin:0 0 12px; color:#334155;">Hi ${safe(name) || 'there'},</p>
    <p style="margin:0 0 16px; color:#334155;">Thanks for contacting Citrix Consulting. A member of our team will get back to you within 24 hours.</p>
    <div style="border:1px solid #e2e8f0; border-radius:8px; padding:12px; background:#f8fafc;">
      <div style="font-weight:600; margin-bottom:8px;">Your message:</div>
      <div style="white-space:pre-wrap;">${safe(message)}</div>
    </div>
    <p style="margin-top:16px; color:#334155;">If you did not submit this request, please ignore this email.</p>
  </div>`;
}

function isValidEmail(email) {
  return typeof email === 'string' && /.+@.+\..+/.test(email);
}

export default async function handler(request, response) {
  if (request.method !== 'POST') {
    return response.status(405).json({ error: 'Method not allowed' });
  }

  const apiKey = process.env.RESEND_API_KEY;

  let body;
  try {
    body =
      request.body && typeof request.body === 'object'
        ? request.body
        : await parseJson(request);
  } catch (err) {
    console.error('JSON parse error:', err);
    return response.status(400).json({ error: 'Invalid JSON body' });
  }

  const { name, email, company, phone, service, message, consent } = body ?? {};

  if (!name || !email || !message) {
    return response
      .status(400)
      .json({ error: 'Missing required fields: name, email, message' });
  }
  if (!isValidEmail(email)) {
    return response.status(400).json({ error: 'Invalid email address' });
  }
  if (typeof consent === 'boolean' && consent !== true) {
    return response.status(400).json({ error: 'Consent is required' });
  }

  try {
    console.log('Environment variables loaded:', {
      RESEND_API_KEY: apiKey
        ? 'Present (starts with: ' + apiKey.substring(0, 5) + '...)'
        : 'Missing',
      ADMIN_EMAIL: ADMIN_EMAIL || 'Missing',
      FROM_EMAIL: FROM_EMAIL || 'Missing',
      NODE_ENV: process.env.NODE_ENV || 'Not set',
    });

    if (!apiKey) {
      console.warn(
        'RESEND_API_KEY missing — simulating email send (dev mode).'
      );
      console.info(
        'Simulated admin email to:',
        ADMIN_EMAIL || '(no admin email configured)',
        '\nPayload:',
        { name, email, company, phone, service }
      );
      console.info('Simulated client email to:', email);
      return response.status(200).json({ ok: true, simulated: true });
    }

    console.log('Creating Resend instance with API key...');
    console.log('API Key first 10 chars:', apiKey.substring(0, 10));

    let resend;
    try {
      resend = new Resend(apiKey);
      console.log('Resend instance created successfully');
    } catch (err) {
      console.error('Error creating Resend instance:', err);
      throw new Error('Failed to initialize email service: ' + err.message);
    }

    const tasks = [];
    let adminStatus = 'skipped';

    if (ADMIN_EMAIL) {
      console.log('Preparing to send admin email to:', ADMIN_EMAIL);
      adminStatus = 'pending';
      tasks.push(
        resend.emails
          .send({
            from: FROM_EMAIL,
            to: [ADMIN_EMAIL],
            subject: `[Website] New contact from ${name}`,
            reply_to: email,
            html: buildAdminHtml({
              name,
              email,
              company,
              phone,
              service,
              message,
            }),
          })
          .catch((err) => {
            console.error('Error sending admin email:', err);
            throw err;
          })
      );
    }

    console.log('Preparing to send client email to:', email);
    tasks.push(
      resend.emails
        .send({
          from: FROM_EMAIL,
          to: [email],
          subject: 'We received your message — Citrix Consulting',
          html: buildClientHtml({ name, message }),
        })
        .catch((err) => {
          console.error('Error sending client email:', err);
          throw err;
        })
    );

    console.log('Executing all email tasks...');
    let meta;
    let clientFailed = false;

    try {
      const results = await Promise.allSettled(tasks);
      console.log('Email tasks completed with results:', results);

      meta = {
        from: FROM_EMAIL,
        to: { admin: ADMIN_EMAIL || null, client: email },
        admin: ADMIN_EMAIL
          ? results[0]
            ? results[0].status === 'fulfilled'
              ? results[0].value
              : {
                  error:
                    results[0].reason?.message || String(results[0].reason),
                }
            : 'unknown'
          : 'skipped',
        client:
          results[ADMIN_EMAIL ? 1 : 0].status === 'fulfilled'
            ? results[ADMIN_EMAIL ? 1 : 0].value
            : {
                error:
                  results[ADMIN_EMAIL ? 1 : 0].reason?.message ||
                  String(results[ADMIN_EMAIL ? 1 : 0].reason),
              },
      };

      clientFailed = !!meta.client?.error;
      console.log('Client email status:', clientFailed ? 'Failed' : 'Success');
    } catch (error) {
      console.error('Error in Promise.allSettled for email tasks:', error);
      throw error;
    }
    const adminFailed =
      meta.admin && typeof meta.admin === 'object' && 'error' in meta.admin;

    if (clientFailed && (adminFailed || !ADMIN_EMAIL)) {
      console.error('Emails failed:', meta);
      return response
        .status(500)
        .json({ error: 'Failed to send emails', details: meta });
    }

    return response.status(200).json({ ok: true, details: meta });
  } catch (error) {
    console.error('Email send error:', error);
    console.error('Error details:', {
      message: error.message,
      stack: error.stack,
      name: error.name,
      code: error.code,
      cause: error.cause,
    });
    return response.status(500).json({
      error: 'Failed to send email',
      details: error?.message || String(error),
      stack: process.env.NODE_ENV === 'development' ? error.stack : undefined,
    });
  }
}

async function parseJson(req) {
  const buffers = [];
  for await (const chunk of req) {
    buffers.push(chunk);
  }
  const str = Buffer.concat(buffers).toString('utf8');
  return JSON.parse(str);
}
